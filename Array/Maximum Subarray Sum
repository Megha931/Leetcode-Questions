
// Using 3 loops

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int maxSum=INT_MIN;
        for(int i=0; i<n; i++){
            for(int j=i; j<n; j++ ){
                int sum=0;
                for(int k= i; k<=j; k++){
                    sum +=nums[k];
                   
                }
                maxSum=max(maxSum, sum);
            }
        }
        return maxSum;
    }
};


// Using 2 loops

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int maxSum=INT_MIN;
        for(int i=0; i<n; i++){
              int sum=0;
            for(int j=i; j<n; j++ ){
                    sum +=nums[j];
                    maxSum=max(maxSum, sum); 
                } 
            }
        return maxSum;
    }
};


// Using Kadane's Algorithum


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int maxSum=INT_MIN;

        int sum=0;
        
        for(int i=0; i<n; i++){
            sum+=nums[i];
            maxSum= max(sum, maxSum);

            if(sum<0){
                sum=0;

            }
        }
        return maxSum;
    }
};


// Linear Iteration using 2 loops


#include <bits/stdc++.h>
using namespace std;

vector<int> twoSum(int n, vector<int> &arr, int target) {
    vector<int> ans;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] + arr[j] == target) {
                ans.push_back(i);
                ans.push_back(j);
                return ans;
            }
        }
    }
    return {-1,-1};
}


// using hashing

#include <bits/stdc++.h>
using namespace std;

vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mp;
        for (int i = 0; i < nums.size(); i++) {
            int moreNeeded = target - nums[i];
            if (mp.find(moreNeeded) != mp.end()) {
                return {mp[moreNeeded], i};
            }

           
            mp[nums[i]] = i;
        }

        return {}; 
    }
};


// 2-Pointers approach

#include <bits/stdc++.h>
using namespace std;

vector<int> twoSum(int n, vector<int> &arr, int target) {
vector<int>ans;
    sort(arr.begin(), arr.end());
    int left = 0, right = n - 1;
    while (left < right) {
        int sum = arr[left] + arr[right];
        if (sum == target) {
            ans.push_back(left);
            ans.push_back(right);
             return ans;

        }
        else if (sum < target) left++;
        else right--;
    }
    return {};
}


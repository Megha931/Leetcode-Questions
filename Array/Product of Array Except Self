
// using two empty arrays(prefix & suffix)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();


        int prefix[n];
        int suffix[n];

        prefix[0]=1;
        suffix[n-1]=1;

        for(int i=1; i< n; i++){
            prefix[i]=prefix[i-1]*nums[i-1];

        }
        for(int i=n-2; i>=0; i--){
            suffix[i]=suffix[i+1]*nums[i+1];

        }
        for(int i=0; i<n; i++){
            nums[i]= prefix[i]*suffix[i];
        }
        return nums;
        
    }
};



// Using only prefix array
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
      int n = nums.size();
        vector<int> prefix(n);
        
        
        prefix[0] = 1;  
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] * prefix[i - 1];
        }
        
       
        int suffixproduct = 1;
        for (int i = n - 1; i >= 0; i--) {
            prefix[i] *= suffixproduct;  
            suffixproduct *= nums[i];   
        }
        
        return prefix;

        
    }
};
